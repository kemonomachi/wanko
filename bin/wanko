#!/usr/bin/ruby

require 'optparse'

require_relative '../lib/wanko'
require_relative '../lib/wanko/parsing'

options = {}

if ARGV.empty?
  options[:action] = :fetch
else
  opt_parser = OptionParser.new do |parser|
    parser.banner = 'Usage: wanko [action] [options]'

    parser.separator ''
    parser.separator 'Actions:' 

    parser.on '-a', '--add PATTERN',
            'Add a new pattern to look for when fetching.',
            'PATTERN is a case-insensitve regexp.' do |pattern|
      options[:action] = :add
      options[:pattern] = pattern
    end

    parser.on '-D', '--default-dir [DIR]',
            'Set the default directory for fetch rules.',
            'Show the current default if DIR not specified.' do |directory|
      if directory
        options[:action] = :set_default_dir
        options[:directory] = directory
      else
        options[:action] = :show_default_dir
      end
    end

    parser.on '-f', '--feed [URL]', '--feeds [URL]',
            'Add a new feed to watch for updates.',
            'Show current feeds if URL not specified.' do |url|
      if url
        options[:action] = :add_feed
        options[:url] = url
      else
        options[:action] = :show_feeds
      end
    end

    parser.on '-l', '--list',
            'Show current rules.' do
      options[:action] = :list
    end

    parser.on '-r', '--remove INDEXES', Array,
            'Remove rules. INDEXES is a comma separated list',
            'of indexes or ranges of indexes to remove.',
            'Use -l to show rule indexes.' do |indexes|
      options[:action] = :remove
      options[:indexes] = Wanko::Parsing.parse_index_list indexes
    end

    parser.on '-R', '--remove-feed INDEXES', '--remove-feeds INDEXES',  Array,
            'Remove feeds. INDEXES is a comma separated list',
            'of indexes or ranges of indexes to remove',
            'Use -f to show feed indexes.' do |indexes|
      options[:action] = :remove_feed
      options[:indexes] = Wanko::Parsing.parse_index_list indexes
    end

    parser.separator ''
    parser.separator 'Options:'

    parser.on '-d', '--directory DIR',
            'Optional target directory for fetch rules.',
            'If not specified, the default directory is used.' do |directory|
      options[:directory] = directory
    end

    parser.separator ''
    parser.separator 'Other:'

    parser.on '-h', '--help',
            'Show this message' do
      puts parser
      exit
    end
  end

  begin
    opt_parser.parse!
  rescue OptionParser::InvalidOption
    puts opt_parser
  end
end

fetcher = Wanko::Fetcher.new

case options[:action]
when :add
  if options[:directory]
    fetcher.add options[:pattern], options[:directory]
  else
    fetcher.add options[:pattern]
  end
when :add_feed
  fetcher.add_feed options[:url]
when :fetch
  fetcher.fetch
when :list
  fetcher.list :rules
when :remove
  fetcher.remove :rules, options[:indexes]
when :remove_feed
  fetcher.remove :feeds, options[:indexes]
when :set_default_dir
  fetcher.default_dir = options[:directory]
when :show_default_dir
  puts fetcher.default_dir
when :show_feeds
  fetcher.list :feeds
end

