#!/usr/bin/ruby

require 'json'
require 'open-uri'
require 'nokogiri'
require 'time'

module Wanko
  @config_dir = File.join Dir.home, '.wanko'
  @config = JSON.parse IO.read(File.join @config_dir, 'config')

  def self.save(info, filename)
    open File.join(@config_dir, filename), 'w' do |file|
      file.write JSON.pretty_generate info
    end
  end

  def self.add(rule, dir)
    @config['rules'][rule] = dir
    save @config, 'config'
  end

  def self.base_dir()
    @config['base_directory']
  end

  def self.set_base_dir(dir)
    @config['base_directory'] = dir
    save @config, 'config'
  end

  def self.fetch()
    begin
      latest_read_items = JSON.parse(IO.read(File.join @config_dir, 'latest_read_items')).each_with_object({}) { |(url,guid),latest_read_items|
                     latest_read_items[url] = guid
                   }
    rescue Errno::ENOENT
      latest_read_items = {}
    end

    rules = @config['rules'].each_with_object({}) { |(rule, dir), rules|
      dir = File.join @config['base_directory'], dir unless dir.start_with? '/'
      rules[/#{rule}/i] = dir
    }

    newest_items = {}

    @config['feeds'].each do |url|
      open(url, read_timeout: 10) { |feed|
        Nokogiri::XML(feed).xpath 'rss/channel/item'
      }.tap { |items|
        newest_items[url] = items.first.at_xpath('guid').content
      }.each do |item|
        break if item.at_xpath('guid').content == latest_read_items[url]
        rules.each do |rule, dir|
          if item.at_xpath('title').content =~ rule
            %x(transmission-remote -a "#{item.at_xpath('link').content}" -w #{dir})
            break
          end
        end
      end
    end
 
    save newest_items, 'latest_read_items'
  end
end

if __FILE__ == $PROGRAM_NAME
  if ARGV[0] == 'add'
    Wanko.add ARGV[1], ARGV[2]
  elsif ARGV[0] == 'base'
    puts Wanko.base_dir
  elsif ARGV[0] == 'set-base'
    Wanko.set_base_dir ARGV[1]
  else
    Wanko.fetch
  end
end

