#!/usr/bin/ruby

require 'json'
require 'open-uri'
require 'nokogiri'
require 'time'

module Wanko
  @config_dir = File.join Dir.home, '.wanko'
  @config = JSON.parse IO.read(File.join @config_dir, 'config')

  def self.save(info, filename)
    open File.join(@config_dir, filename), 'w' do |file|
      file.write JSON.pretty_generate info
    end
  end

  def self.add(rule, dir)
    @config['rules'][rule] = dir
    save @config, 'config'
  end

  def self.base_dir()
    @config['base_directory']
  end

  def self.set_base_dir(dir)
    @config['base_directory'] = dir
    save @config, 'config'
  end

  def self.fetch()
    read_items = begin
      JSON.parse File.read(File.join @config_dir, 'read_items')
    rescue Errno::ENOENT
      {}
    end

    read_items.default_proc = proc {|read_items,key| read_items[key] = []}

    rules = @config['rules'].each_with_object({}) { |(rule, dir), rules|
      dir = File.join @config['base_directory'], dir unless dir.start_with? '/'
      rules[/#{rule}/i] = dir
    }

    @config['feeds'].each do |url|
      begin
        open url, read_timeout: 10 do |feed_xml|
          new_read_items = []
          Nokogiri::XML(feed_xml).xpath('rss/channel/item').each do |item|
            item_id = item.at_xpath('guid').content

            unless read_items[url].include? item_id
              rules.each do |rule, dir|
                if rule =~ item.at_xpath('title').content
                  %x(transmission-remote -a "#{item.at_xpath('link').content}" -w #{dir})
                end
              end
              new_read_items << item_id
            end
          end

          read_items[url] = (new_read_items + read_items[url]).first 50
        end

      rescue OpenURI::HTTPError, Net::ReadTimeout, Errno::ECONNREFUSED
        next
      end
    end

    save read_items, 'read_items'
  end
end

if __FILE__ == $PROGRAM_NAME
  if ARGV[0] == 'add'
    Wanko.add ARGV[1], ARGV[2]
  elsif ARGV[0] == 'base'
    puts Wanko.base_dir
  elsif ARGV[0] == 'set-base'
    Wanko.set_base_dir ARGV[1]
  else
    Wanko.fetch
  end
end

